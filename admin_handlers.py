# admin_handlers.py

import os
import psutil
from datetime import datetime, timedelta

from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from database import db
from config import OWNER_ID


# --- –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê /STATUS ---
async def show_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—É —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã."""
    process = psutil.Process(os.getpid())

    # CPU
    cpu_usage = psutil.cpu_percent(interval=1)

    # RAM
    ram_usage = process.memory_info().rss / (1024 * 1024)  # –≤ –ú–ë
    total_ram = psutil.virtual_memory().total / (1024 * 1024)
    ram_percent = psutil.virtual_memory().percent

    # Uptime
    uptime_delta = datetime.now() - context.bot_data['start_time']
    days, remainder = divmod(uptime_delta.total_seconds(), 86400)
    hours, remainder = divmod(remainder, 3600)
    minutes, seconds = divmod(remainder, 60)
    uptime_str = f"{int(days)}–¥ {int(hours)}—á {int(minutes)}–º"

    # DB Stats
    total_users = db.get_total_users_count()
    total_subs = db.get_total_subscriptions_count()

    text = (
        "<b>üìä –°—Ç–∞—Ç—É—Å –ë–æ—Ç–∞</b>\n\n"
        f"<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:</b>\n"
        f"  - CPU: {cpu_usage}%\n"
        f"  - RAM (–±–æ—Ç): {ram_usage:.2f} –ú–ë\n"
        f"  - RAM (–≤—Å–µ–≥–æ): {ram_percent}% ({total_ram:.0f} –ú–ë)\n\n"
        f"<b>‚è±Ô∏è Uptime:</b> {uptime_str}\n\n"
        f"<b>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {total_users}\n"
        f"<b>üîî –ü–æ–¥–ø–∏—Å–∫–∏:</b> {total_subs}"
    )
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)


# --- –û–°–¢–ê–õ–¨–ù–´–ï –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚öôÔ∏è <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n/status, /admin_add, /admin_remove, /admin_list, /admin_users",
        parse_mode=ParseMode.HTML)


async def admin_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        db.add_admin(int(context.args[0]), update.effective_user.id)
        await update.message.reply_text("‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùóÔ∏è–§–æ—Ä–º–∞—Ç: /admin_add USER_ID")


async def admin_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        admin_id = int(context.args[0])
        if admin_id == OWNER_ID:
            await update.message.reply_text("‚õîÔ∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
            return
        db.remove_admin(admin_id)
        await update.message.reply_text("üóëÔ∏è –ê–¥–º–∏–Ω —É–¥–∞–ª–µ–Ω.")
    except (IndexError, ValueError):
        await update.message.reply_text("‚ùóÔ∏è–§–æ—Ä–º–∞—Ç: /admin_remove USER_ID")


async def admin_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admins = db.get_all_admins()
    owner = f"üëë –í–ª–∞–¥–µ–ª–µ—Ü: <code>{OWNER_ID}</code>"
    other_admins = "\n".join([f"- <code>{admin_id}</code>" for admin_id in admins])
    await update.message.reply_text(f"{owner}\n\nüë• <b>–ê–¥–º–∏–Ω—ã:</b>\n{other_admins or '–ù–µ—Ç'}", parse_mode=ParseMode.HTML)


async def admin_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    users = db.get_all_users_info()
    text = f"üë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}</b>\n\n" + "\n".join(
        [f"- {u['first_name']} (<code>{u['user_id']}</code>)" for u in users[:20]])
    await update.message.reply_text(text, parse_mode=ParseMode.HTML)
