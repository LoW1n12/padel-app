# bot.py

import asyncio
import logging
from datetime import datetime
from functools import wraps
import aiohttp
import aiohttp_cors
from aiohttp import web

# –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã ReplyKeyboardMarkup –∏ KeyboardButton –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫
from telegram import Update, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import Conflict

import config
from database import db
from handlers import (
    start, help_command, show_sessions, add_time, my_times, button_callback,
    ensure_user_registered, apply_flood_control
)
from admin_handlers import (
    admin_panel, show_status, admin_add, admin_remove, admin_list, admin_users
)
from monitoring import monitor_availability
from api import setup_api_routes

logger = logging.getLogger(__name__)


# ================== –î–ï–ö–û–†–ê–¢–û–†–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê ==================

def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""

    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if not db.is_admin(update.effective_user.id):
            logger.warning(
                f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–µ –æ—Ç user_id={update.effective_user.id}")
            return
        return await func(update, context, *args, **kwargs)

    return wrapper


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App
@ensure_user_registered
async def app_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App."""
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–∞–Ω—Å–æ–≤.",
        # –ò–ó–ú–ï–ù–ï–ù–û: –£–±—Ä–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ 'web.' –ø–µ—Ä–µ–¥ –∫–ª–∞—Å—Å–∞–º–∏ –∫–Ω–æ–ø–æ–∫ Telegram
        reply_markup=ReplyKeyboardMarkup.from_button(
            KeyboardButton("üéæ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=config.MINI_APP_URL)),
            resize_keyboard=True
        )
    )


async def post_init(application: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤."""
    logger.info("--- –ó–∞–ø—É—Å–∫ post_init —Ö—É–∫–∞ ---")
    db.init_database()
    application.bot_data['start_time'] = datetime.now()
    application.bot_data['aiohttp_session'] = aiohttp.ClientSession(headers={'User-Agent': 'Mozilla/5.0'})

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_task = asyncio.create_task(monitor_availability(application))
    application.bot_data['monitor_task'] = monitor_task

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è API
    web_app = web.Application()
    web_app['bot_app'] = application
    setup_api_routes(application, web_app)

    cors = aiohttp_cors.setup(web_app, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
        )
    })
    for route in list(web_app.router.routes()):
        cors.add(route)

    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    application.bot_data['web_runner'] = runner
    logger.info("--- –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è API —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080 ---")


async def post_shutdown(application: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤."""
    logger.info("--- –ó–∞–ø—É—Å–∫ post_shutdown —Ö—É–∫–∞ ---")
    if monitor_task := application.bot_data.get('monitor_task'):
        monitor_task.cancel()
    if session := application.bot_data.get('aiohttp_session'):
        await session.close()
    if runner := application.bot_data.get('web_runner'):
        await runner.cleanup()
    db.close()
    logger.info("--- –†–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã ---")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)
    if isinstance(context.error, Conflict):
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –í–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–ø—É—â–µ–Ω–∞ –µ—â–µ –æ–¥–Ω–∞ –∫–æ–ø–∏—è –±–æ—Ç–∞.")


# ================== –§–£–ù–ö–¶–ò–Ø –°–ë–û–†–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==================

def create_bot_app() -> Application:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞."""
    application = (
        Application.builder()
        .token(config.BOT_TOKEN)
        .post_init(post_init)
        .post_shutdown(post_shutdown)
        .build()
    )

    # --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
    application.add_handler(CommandHandler("start", apply_flood_control(ensure_user_registered(start))))
    application.add_handler(CommandHandler("app", app_command))
    application.add_handler(CommandHandler("help", apply_flood_control(ensure_user_registered(help_command))))
    application.add_handler(CommandHandler("sessions", apply_flood_control(ensure_user_registered(show_sessions))))
    application.add_handler(CommandHandler("addtime", apply_flood_control(ensure_user_registered(add_time))))
    application.add_handler(CommandHandler("mytimes", apply_flood_control(ensure_user_registered(my_times))))

    application.add_handler(CommandHandler("admin", ensure_user_registered(admin_required(admin_panel))))
    application.add_handler(CommandHandler("status", ensure_user_registered(admin_required(show_status))))
    application.add_handler(CommandHandler("admin_add", ensure_user_registered(admin_required(admin_add))))
    application.add_handler(CommandHandler("admin_remove", ensure_user_registered(admin_required(admin_remove))))
    application.add_handler(CommandHandler("admin_list", ensure_user_registered(admin_required(admin_list))))
    application.add_handler(CommandHandler("admin_users", ensure_user_registered(admin_required(admin_users))))

    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)

    return application
