# bot.py

import asyncio
import logging
from datetime import datetime
from functools import wraps
import aiohttp

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, MenuButtonWebApp, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from telegram.error import Conflict

import config
from database import db
from handlers import (
    start, help_command, show_sessions, add_time, my_times, button_callback,
    ensure_user_registered, apply_flood_control
)
from admin_handlers import (
    admin_panel, show_status, admin_add, admin_remove, admin_list, admin_users
)
from monitoring import monitor_availability
from webapp_server import create_webapp_server

logger = logging.getLogger(__name__)


# --- –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ó–ê–ü–£–°–ö–ê WEBAPP (–û–°–¢–ê–ï–¢–°–Ø –ö–ê–ö –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –°–ü–û–°–û–ë) ---
async def webapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Mini App."""
    # !!! –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –≤–∞—à –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL –æ—Ç GitHub Pages !!!
    WEBAPP_URL = "https://–í–ê–®_–õ–û–ì–ò–ù.github.io/–í–ê–®_–†–ï–ü–û–ó–ò–¢–û–†–ò–ô/"

    keyboard = [[InlineKeyboardButton("üéæ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": WEBAPP_URL})]]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Ä—Ç–æ–≤:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# ================== –î–ï–ö–û–†–ê–¢–û–†–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê ==================

def admin_required(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        if not db.is_admin(update.effective_user.id):
            return
        return await func(update, context, *args, **kwargs)

    return wrapper


async def post_init(application: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤."""
    logger.info("--- –ó–∞–ø—É—Å–∫ post_init —Ö—É–∫–∞ ---")
    application.bot_data['start_time'] = datetime.now()
    application.bot_data['aiohttp_session'] = aiohttp.ClientSession(headers={'User-Agent': 'Mozilla/5.0'})

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor_task = asyncio.create_task(monitor_availability(application))
    application.bot_data['monitor_task'] = monitor_task
    logger.info("--- –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ ---")

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Mini App
    webapp_task = asyncio.create_task(create_webapp_server(bot_app=application))
    application.bot_data['webapp_task'] = webapp_task

    # –ò–ó–ú–ï–ù–ï–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App
    try:
        WEBAPP_URL = "https://low1n12.github.io/padel-app/"  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
        await application.bot.set_chat_menu_button(
            menu_button=MenuButtonWebApp(
                text="üéæ –ù–∞–π—Ç–∏ –∫–æ—Ä—Ç",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )
        )
        logger.info("--- –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –¥–ª—è Web App —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ ---")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é: {e}")


async def post_shutdown(application: Application):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤."""
    logger.info("--- –ó–∞–ø—É—Å–∫ post_shutdown —Ö—É–∫–∞ ---")
    if monitor_task := application.bot_data.get('monitor_task'):
        monitor_task.cancel()
    if webapp_task := application.bot_data.get('webapp_task'):
        webapp_task.cancel()

    if session := application.bot_data.get('aiohttp_session'):
        await session.close()
    db.close()
    logger.info("--- –†–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã ---")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)
    if isinstance(context.error, Conflict):
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç. –í–µ—Ä–æ—è—Ç–Ω–æ, –∑–∞–ø—É—â–µ–Ω–∞ –µ—â–µ –æ–¥–Ω–∞ –∫–æ–ø–∏—è –±–æ—Ç–∞.")


# ================== –§–£–ù–ö–¶–ò–Ø –°–ë–û–†–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==================

def create_bot_app() -> Application:
    application = Application.builder().token(config.BOT_TOKEN).post_init(post_init).post_shutdown(
        post_shutdown).build()

    # --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
    application.add_handler(CommandHandler("webapp", webapp_command))
    application.add_handler(CommandHandler("start", apply_flood_control(ensure_user_registered(start))))
    application.add_handler(CommandHandler("help", apply_flood_control(ensure_user_registered(help_command))))
    application.add_handler(CommandHandler("sessions", apply_flood_control(ensure_user_registered(show_sessions))))
    application.add_handler(CommandHandler("addtime", apply_flood_control(ensure_user_registered(add_time))))
    application.add_handler(CommandHandler("mytimes", apply_flood_control(ensure_user_registered(my_times))))

    application.add_handler(CommandHandler("admin", ensure_user_registered(admin_required(admin_panel))))
    application.add_handler(CommandHandler("status", ensure_user_registered(admin_required(show_status))))
    application.add_handler(CommandHandler("admin_add", ensure_user_registered(admin_required(admin_add))))
    application.add_handler(CommandHandler("admin_remove", ensure_user_registered(admin_required(admin_remove))))
    application.add_handler(CommandHandler("admin_list", ensure_user_registered(admin_required(admin_list))))
    application.add_handler(CommandHandler("admin_users", ensure_user_registered(admin_required(admin_users))))

    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_error_handler(error_handler)

    return application
