# handlers.py

import asyncio
import logging
import time
from datetime import date, timedelta, datetime
from collections import defaultdict, deque
import json
from functools import wraps

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from telegram.error import BadRequest

from database import db
from config import (
    LOCATIONS_CONFIG, DEFAULT_RANGE_DAYS, MAX_SPECIFIC_DAYS, ANY_HOUR_PLACEHOLDER,
    FLOOD_CONTROL_ACTIONS, FLOOD_CONTROL_PERIOD_SECONDS
)
from utils import format_date_short, format_date_full
from parser import fetch_availability_for_location_date

logger = logging.getLogger(__name__)


# ================== –î–ï–ö–û–†–ê–¢–û–†–´ –ò MIDDLEWARE ==================

def ensure_user_registered(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ë–î."""

    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user = update.effective_user
        chat = update.effective_chat
        if user and chat:
            db.add_user(user.id, chat.id, user.username, user.first_name)
        return await func(update, context, *args, **kwargs)

    return wrapper


def apply_flood_control(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–æ–º–∞–Ω–¥ –æ—Ç —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤."""

    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_actions = context.user_data.get('user_actions', deque(maxlen=FLOOD_CONTROL_ACTIONS))
        now = time.time()

        while user_actions and now - user_actions[0] > FLOOD_CONTROL_PERIOD_SECONDS:
            user_actions.popleft()

        if len(user_actions) >= FLOOD_CONTROL_ACTIONS:
            logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–ª—É–¥ –∫–æ–º–∞–Ω–¥–∞–º–∏ –æ—Ç user_id={update.effective_user.id}")
            return

        user_actions.append(now)
        context.user_data['user_actions'] = user_actions

        return await func(update, context, *args, **kwargs)

    return wrapper


# ================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ==================

@ensure_user_registered
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã.\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/sessions - üéæ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –°–µ–∞–Ω—Å—ã\n"
        "/addtime - ‚ûï –î–æ–±–∞–≤–∏—Ç—å –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ\n"
        "/mytimes - üìù –ú–æ–∏ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/help - ‚ùì –ü–æ–º–æ—â—å"
    )
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.HTML)


@ensure_user_registered
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)


# ================== –õ–û–ì–ò–ö–ê –ü–†–û–°–ú–û–¢–†–ê –°–ï–ê–ù–°–û–í (/sessions) ==================

@ensure_user_registered
async def show_sessions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_sessions_location_selection(update, context)


async def send_sessions_location_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton(loc, callback_data=f"sessions_loc_{loc}")] for loc in LOCATIONS_CONFIG.keys()]
    text = "üìç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ–∞–Ω—Å–æ–≤:"
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def show_sessions_summary(query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE, location: str):
    await query.edit_message_text(f"üîç –ò—â—É —Å–µ–∞–Ω—Å—ã –¥–ª—è <b>{location}</b>...", parse_mode=ParseMode.HTML)
    now, today = datetime.now(), date.today()
    dates_to_check = [today + timedelta(days=i) for i in range(DEFAULT_RANGE_DAYS)]
    session = context.bot_data['aiohttp_session']

    tasks = [fetch_availability_for_location_date(session, location, d) for d in dates_to_check]
    results = await asyncio.gather(*tasks)

    all_sessions_by_date = defaultdict(list)
    for d, res in zip(dates_to_check, results):
        if res:
            for time_str in res:
                if d == today and int(time_str.split(':')[0]) < now.hour:
                    continue
                all_sessions_by_date[d].append(time_str)

    location_in_case = LOCATIONS_CONFIG.get(location, {}).get('display_in_case', f"–≤ ¬´{location}¬ª")

    if not all_sessions_by_date:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sessions_back_to_loc_select")]]
        await query.edit_message_text(
            f"üòî –°–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ—Ä—Ç–æ–≤ {location_in_case} –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ {DEFAULT_RANGE_DAYS} –¥–Ω–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
        return

    msg_parts = [f"<b>–í—Å–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∫–æ—Ä—Ç—ã {location_in_case} –≤ –±–ª–∏–∂–∞–π—à–∏–µ {DEFAULT_RANGE_DAYS} –¥–Ω–µ–π:</b>\n"]
    date_buttons = []

    for d, times in sorted(all_sessions_by_date.items()):
        times_str = "‚Ä¢ " + ' '.join(sorted(times))
        msg_parts.append(f"üéæ <b>{format_date_full(d)}:</b>\n{times_str}\n")
        date_buttons.append(
            InlineKeyboardButton(format_date_short(d), callback_data=f"sessions_date_{location}_{d.isoformat()}"))

    msg_parts.append("<b>–ü–æ–¥—Ä–æ–±–Ω–µ–µ:</b>")

    keyboard = [date_buttons[i:i + 4] for i in range(0, len(date_buttons), 4)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="sessions_back_to_loc_select")])
    await query.edit_message_text("\n".join(msg_parts), parse_mode=ParseMode.HTML,
                                  reply_markup=InlineKeyboardMarkup(keyboard), disable_web_page_preview=True)


async def show_sessions_detail(query: Update.callback_query, context: ContextTypes.DEFAULT_TYPE, location: str,
                               date_iso: str):
    check_date = date.fromisoformat(date_iso)
    await query.edit_message_text(f"üîç –ó–∞–≥—Ä—É–∂–∞—é –¥–µ—Ç–∞–ª–∏ –Ω–∞ <b>{format_date_short(check_date)}</b>...",
                                  parse_mode=ParseMode.HTML)

    session = context.bot_data['aiohttp_session']
    res = await fetch_availability_for_location_date(session, location, check_date)
    if not res:
        await query.edit_message_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.")
        return

    msg_parts = [f"üéæ <b>{location}</b> ({format_date_full(check_date)}):"]
    for time_str, court_data in sorted(res.items()):
        details_parts = []
        for court_type, details in sorted(court_data.items()):
            price_str = f"{details['price']:,.0f}".replace(',', '.')
            details_parts.append(f"{court_type} - {price_str} ‚ÇΩ")
        msg_parts.append(f"‚Ä¢ <b>{time_str}</b>: {' | '.join(details_parts)}")

    msg_parts.append("\n*<i>–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ —á–∞—Å</i>")

    booking_link = LOCATIONS_CONFIG.get(location, {}).get('booking_link')
    if booking_link:
        msg_parts.append(f'\nüîó <a href="{booking_link}">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å</a>')

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É", callback_data=f"sessions_back_to_summary_{location}")]]
    await query.edit_message_text("\n".join(msg_parts), parse_mode=ParseMode.HTML,
                                  reply_markup=InlineKeyboardMarkup(keyboard), disable_web_page_preview=True)


# ================== –õ–û–ì–ò–ö–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–Ø (/addtime) ==================

@ensure_user_registered
async def add_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_location_selection(update, context, new_message=True)


async def send_location_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, new_message: bool = False):
    keyboard = [[InlineKeyboardButton(loc, callback_data=f"loc_{loc}")] for loc in LOCATIONS_CONFIG.keys()]
    text = "üìç –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–∫–∞—Ü–∏—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"
    if new_message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


# –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def send_monitoring_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    location = context.user_data.get('location')

    user_times = db.get_user_times(user_id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å–∫–∞ "–Ω–∞ 10 –¥–Ω–µ–π, –ª—é–±–æ–µ –≤—Ä–µ–º—è" –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
    has_range_any_time_sub = any(
        sub['location'] == location and
        sub['monitor_data'].get('type') == 'range' and
        sub['monitor_data'].get('value') == DEFAULT_RANGE_DAYS and
        sub['hour'] == ANY_HOUR_PLACEHOLDER
        for sub in user_times
    )

    keyboard = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –µ—â–µ –Ω–µ—Ç
    if not has_range_any_time_sub:
        keyboard.append([InlineKeyboardButton(f"–ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ {DEFAULT_RANGE_DAYS} –¥–Ω–µ–π",
                                              callback_data=f"mon_type_range_{DEFAULT_RANGE_DAYS}")])

    keyboard.append([InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É", callback_data="mon_type_specific")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_loc_select")])

    await query.edit_message_text(f"üìç <b>{location}</b>\nüóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
                                  reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)


# –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def send_date_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    location = context.user_data.get('location')

    user_times = db.get_user_times(user_id)
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ "–ª—é–±–æ–µ –≤—Ä–µ–º—è" –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏
    existing_any_time_dates = {
        sub['monitor_data']['value'] for sub in user_times
        if sub['location'] == location and
           sub['monitor_data'].get('type') == 'specific' and
           sub['hour'] == ANY_HOUR_PLACEHOLDER
    }

    today = date.today()
    keyboard_rows, buttons_in_row = [], []
    any_date_button_added = False

    for i in range(MAX_SPECIFIC_DAYS):
        d = today + timedelta(days=i)
        date_iso = d.isoformat()
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞ –Ω–µ–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ "–ª—é–±–æ–µ –≤—Ä–µ–º—è"
        if date_iso not in existing_any_time_dates:
            any_date_button_added = True
            buttons_in_row.append(InlineKeyboardButton(d.strftime('%d.%m'), callback_data=f"mon_date_{date_iso}"))
            if len(buttons_in_row) == 5:
                keyboard_rows.append(buttons_in_row)
                buttons_in_row = []
    if buttons_in_row:
        keyboard_rows.append(buttons_in_row)

    keyboard_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_mon_type")])

    text = f"üìç <b>{location}</b>\nüóìÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:"
    if not any_date_button_added:
        text = f"üìç <b>{location}</b>\nüóìÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞ '–ª—é–±–æ–µ –≤—Ä–µ–º—è' –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.\n\n–£–¥–∞–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ /mytimes, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ."
        final_keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_mon_type")]]
    else:
        final_keyboard = keyboard_rows

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(final_keyboard), parse_mode=ParseMode.HTML)


# –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
async def send_hour_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    location = context.user_data.get('location')
    monitor_data = context.user_data.get('monitor_data', {})

    user_times = db.get_user_times(user_id)
    # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è —ç—Ç–æ–π –ª–æ–∫–∞—Ü–∏–∏ –∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–∞—Ç—ã/–¥–∏–∞–ø–∞–∑–æ–Ω–∞)
    existing_hours = {
        sub['hour'] for sub in user_times
        if sub['location'] == location and sub['monitor_data'] == monitor_data
    }

    keyboard_rows = []
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    hour_buttons = [InlineKeyboardButton(f"{h:02d}:00", callback_data=f"hour_{h}") for h in range(7, 24) if
                    h not in existing_hours]

    for i in range(0, len(hour_buttons), 4):
        keyboard_rows.append(hour_buttons[i:i + 4])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–æ–µ –≤—Ä–µ–º—è", –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
    if ANY_HOUR_PLACEHOLDER not in existing_hours:
        keyboard_rows.append([InlineKeyboardButton("üëÄ –õ—é–±–æ–µ –≤—Ä–µ–º—è", callback_data="hour_all")])

    back_callback = "back_to_date_select" if monitor_data.get("type") == "specific" else "back_to_mon_type"
    keyboard_rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=back_callback)])

    await query.edit_message_text(f"üìç <b>{location}</b>\nüïê –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å:",
                                  reply_markup=InlineKeyboardMarkup(keyboard_rows), parse_mode=ParseMode.HTML)


async def send_court_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    location = context.user_data.get('location')
    hour = context.user_data.get('selected_hour')

    hour_str = "–õ—é–±–æ–µ –≤—Ä–µ–º—è" if hour == ANY_HOUR_PLACEHOLDER else f"{hour:02d}:00"
    court_types = LOCATIONS_CONFIG.get(location, {}).get("courts", {}).keys()

    keyboard = [[InlineKeyboardButton(f"–¢–æ–ª—å–∫–æ {ct}", callback_data=f"courts_{ct}")] for ct in court_types]
    if len(court_types) > 1:
        keyboard.append([InlineKeyboardButton("–í—Å–µ —Ç–∏–ø—ã", callback_data=f"courts_both")])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_hour_select")])

    await query.edit_message_text(f"üìç <b>{location}</b> | üïê <b>{hour_str}</b>\n\nüéæ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ—Ä—Ç–∞:",
                                  reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)


# ================== –õ–û–ì–ò–ö–ê –ü–†–û–°–ú–û–¢–†–ê –ò –£–î–ê–õ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–û–ö (/mytimes) ==================

@ensure_user_registered
async def my_times(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_my_times_message(update.message, update.effective_user.id)


async def send_my_times_message(message, user_id: int):
    user_times = db.get_user_times(user_id)
    if not user_times:
        await message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π.")
        return

    msg_parts = ["üïê <b>–í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>"]
    sorted_subs = sorted(user_times, key=lambda s: (s['location'], str(s['monitor_data'].get('value', '')), s['hour']))

    for sub in sorted_subs:
        label = "–õ—é–±–æ–µ –≤—Ä–µ–º—è" if sub['hour'] == ANY_HOUR_PLACEHOLDER else f"{sub['hour']:02d}:00"
        types_str = ", ".join(sub["court_types"])
        md = sub["monitor_data"]
        desc = f"–Ω–∞ {md['value']} –¥–Ω." if md[
                                              "type"] == "range" else f"–Ω–∞ {format_date_short(datetime.strptime(md['value'], '%Y-%m-%d').date())}"
        msg_parts.append(f"\nüìç <b>{sub['location']}</b>: {label} ({types_str}) - <i>{desc}</i>")

    await message.reply_text("\n".join(msg_parts), parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(
        [[InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è", callback_data="go_to_remove")]]))


async def send_remove_menu(message, user_id: int):
    user_times = db.get_user_times(user_id)
    if not user_times:
        await message.reply_text("‚ùå –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    keyboard = []
    sorted_subs = sorted(user_times, key=lambda s: (s['location'], str(s['monitor_data'].get('value', '')), s['hour']))

    for sub in sorted_subs:
        label_hour = "–õ—é–±–æ–µ" if sub['hour'] == ANY_HOUR_PLACEHOLDER else f"{sub['hour']:02d}:00"
        types_str = "+".join([c[0] for c in sub["court_types"]])
        md = sub["monitor_data"]
        desc = f"({md['value']}–¥)" if md[
                                          "type"] == "range" else f"({datetime.strptime(md['value'], '%Y-%m-%d').date().strftime('%d.%m')})"
        keyboard.append([InlineKeyboardButton(f"üóë {sub['location']} {label_hour} {desc} ({types_str})",
                                              callback_data=f"rm_id_{sub['id']}")])

    if user_times:
        keyboard.append([InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ", callback_data="rm_all")])

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_mytimes")])
    await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –ö–ù–û–ü–û–ö ==================

@ensure_user_registered
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query

    user_actions = context.user_data.get('user_actions', deque(maxlen=FLOOD_CONTROL_ACTIONS))
    now = time.time()

    while user_actions and now - user_actions[0] > FLOOD_CONTROL_PERIOD_SECONDS:
        user_actions.popleft()

    if len(user_actions) >= FLOOD_CONTROL_ACTIONS:
        await query.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.", show_alert=True)
        return

    user_actions.append(now)
    context.user_data['user_actions'] = user_actions

    await query.answer()
    data = query.data
    user_id = query.from_user.id

    try:
        if data.startswith("sessions_"):
            if data.startswith("sessions_loc_"):
                await show_sessions_summary(query, context, data.split("_", 2)[2])
            elif data.startswith("sessions_date_"):
                await show_sessions_detail(query, context, *data.split("_")[2:])
            elif data == "sessions_back_to_loc_select":
                await send_sessions_location_selection(update, context)
            elif data.startswith("sessions_back_to_summary_"):
                await show_sessions_summary(query, context, data[len("sessions_back_to_summary_"):])
            return

        if data == "back_to_loc_select":
            await send_location_selection(update, context)
        elif data == "back_to_mon_type":
            await send_monitoring_type_selection(update, context)
        elif data.startswith("back_to_date_select"):
            await send_date_selection(update, context)
        elif data == "back_to_hour_select":
            await send_hour_selection(update, context)

        elif data == "back_to_mytimes":
            await query.message.delete()
            await send_my_times_message(query.message, user_id)
        elif data == 'go_to_remove':
            await query.message.delete()
            await send_remove_menu(query.message, user_id)
        elif data.startswith("rm_id_"):
            db.remove_user_time_by_id(int(data.split("_")[2]))
            await query.message.delete()
            await send_my_times_message(query.message, user_id)
        elif data == "rm_all":
            await query.edit_message_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?",
                                          reply_markup=InlineKeyboardMarkup(
                                              [[InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="rm_all_confirm")],
                                               [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="go_to_remove")]]))
        elif data == "rm_all_confirm":
            db.remove_all_user_times(user_id)
            await query.message.delete()
            await send_my_times_message(query.message, user_id)

        elif data.startswith("loc_"):
            context.user_data['location'] = data.split("_", 1)[1]
            await send_monitoring_type_selection(update, context)
        elif data.startswith("mon_type_"):
            _, _, mon_type, *rest = data.split("_")
            if mon_type == 'range':
                context.user_data['monitor_data'] = {"type": "range", "value": int(rest[0])}
                await send_hour_selection(update, context)
            elif mon_type == 'specific':
                await send_date_selection(update, context)
        elif data.startswith("mon_date_"):
            context.user_data['monitor_data'] = {"type": "specific", "value": data.split("_")[2]}
            await send_hour_selection(update, context)
        elif data.startswith("hour_"):
            context.user_data['selected_hour'] = ANY_HOUR_PLACEHOLDER if data.endswith("_all") else int(
                data.split("_")[1])
            await send_court_type_selection(update, context)
        elif data.startswith("courts_"):
            loc = context.user_data.get('location')
            hour = context.user_data.get('selected_hour')
            md = context.user_data.get('monitor_data')

            if not all([loc, hour is not None, md]):
                await query.edit_message_text("‚ùóÔ∏è–û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /addtime")
                return

            court_selection = data.split("_", 1)[1]
            all_court_types = LOCATIONS_CONFIG.get(loc, {}).get("courts", {}).keys()
            court_types = sorted(list(all_court_types) if court_selection == "both" else [court_selection])

            db.add_user_time(user_id, loc, hour, court_types, md)

            label = "–ª—é–±–æ–µ –≤—Ä–µ–º—è" if hour == ANY_HOUR_PLACEHOLDER else f"{hour:02d}:00"
            types_str = "+".join(court_types)
            desc = f"–Ω–∞ {md['value']} –¥–Ω." if md[
                                                  "type"] == "range" else f"–Ω–∞ {format_date_short(datetime.strptime(md['value'], '%Y-%m-%d').date())}"

            await query.edit_message_text(
                f"‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:\nüìç <b>{loc}</b> | üïê <b>{label}</b> | üéæ <b>{types_str}</b>\n<i>({desc})</i>",
                parse_mode=ParseMode.HTML)
            context.user_data.clear()

    except BadRequest as e:
        if "Message is not modified" not in str(e):
            logger.error(f"–û—à–∏–±–∫–∞ BadRequest –≤ button_callback: {e}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ button_callback: {e}", exc_info=True)
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except BadRequest:
            pass
