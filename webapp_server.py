# webapp_server.py

import asyncio
import hmac
import hashlib
import json
import logging
from datetime import date, timedelta
from functools import wraps
from urllib.parse import parse_qsl

from aiohttp import web

from config import BOT_TOKEN, LOCATIONS_CONFIG
from database import db
from parser import fetch_availability_for_location_date

logger = logging.getLogger(__name__)


# ================== –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨: –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• TELEGRAM ==================

def is_safe_data(init_data: str) -> (bool, dict):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App."""
    if not BOT_TOKEN:
        return False, {}

    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É "key=value&key2=value2" –≤ —Å–ª–æ–≤–∞—Ä—å
        parsed_data = dict(parse_qsl(init_data))
    except ValueError:
        return False, {}

    if "hash" not in parsed_data:
        return False, {}

    hash_from_telegram = parsed_data.pop('hash')

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    data_check_string = "\n".join(f"{k}={v}" for k, v in sorted(parsed_data.items()))

    # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    secret_key = hmac.new("WebAppData".encode(), BOT_TOKEN.encode(), hashlib.sha256).digest()
    calculated_hash = hmac.new(secret_key, data_check_string.encode(), hashlib.sha256).hexdigest()

    if calculated_hash == hash_from_telegram:
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JSON-—Å—Ç—Ä–æ–∫–∏
            user_data = json.loads(parsed_data.get("user", "{}"))
            return True, user_data
        except json.JSONDecodeError:
            return False, {}

    return False, {}


def auth_required(handler):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""

    @wraps(handler)
    async def wrapper(request):
        # initData –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –∏–ª–∏ –≤ —Ç–µ–ª–µ JSON-–∑–∞–ø—Ä–æ—Å–∞
        init_data = request.headers.get("X-Telegram-Init-Data")
        if not init_data:
            try:
                body = await request.json()
                init_data = body.get("initData")
            except (json.JSONDecodeError, TypeError):
                init_data = None

        if not init_data:
            return web.json_response({"error": "Authorization required"}, status=401)

        is_safe, user_data = is_safe_data(init_data)

        if not is_safe:
            return web.json_response({"error": "Invalid authorization data"}, status=403)

        # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        return await handler(request, user_data)

    return wrapper


# ================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò API-–≠–ù–î–ü–û–ò–ù–¢–û–í ==================

async def get_locations(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç frontend."""
    locations_list = [
        {"id": key, "name": value['display_in_case'].replace("–≤ ", "").replace("–Ω–∞ ", ""), "description": key}
        for key, value in LOCATIONS_CONFIG.items()
    ]
    return web.json_response({"locations": locations_list})


async def get_calendar_data(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–µ–∞–Ω—Å—ã."""
    location_id = request.query.get("location_id")
    if not location_id:
        return web.json_response({"error": "location_id is required"}, status=400)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 60 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ (–ø—Ä–∏–º–µ—Ä–Ω–æ 2 –º–µ—Å—è—Ü–∞)
    today = date.today()
    dates_to_check = [today + timedelta(days=i) for i in range(60)]
    session = request.app['aiohttp_session']

    tasks = [fetch_availability_for_location_date(session, location_id, d) for d in dates_to_check]
    results = await asyncio.gather(*tasks, return_exceptions=True)

    available_dates = []
    for d, res in zip(dates_to_check, results):
        if res and not isinstance(res, Exception):
            available_dates.append(d.isoformat())

    return web.json_response({"available_dates": available_dates})


async def get_sessions_for_date(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–∞–Ω—Å–∞—Ö –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É."""
    location_id = request.query.get("location_id")
    date_str = request.query.get("date")
    if not location_id or not date_str:
        return web.json_response({"error": "location_id and date are required"}, status=400)

    try:
        check_date = date.fromisoformat(date_str)
    except ValueError:
        return web.json_response({"error": "Invalid date format"}, status=400)

    session = request.app['aiohttp_session']
    availability = await fetch_availability_for_location_date(session, location_id, check_date)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è frontend
    sessions = []
    for time, courts in sorted(availability.items()):
        details = " | ".join([f"{name} ({data['price']}‚ÇΩ)" for name, data in sorted(courts.items())])
        sessions.append({"time": time, "details": details})

    return web.json_response({"sessions": sessions})


@auth_required
async def add_notification(request, user_data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        body = await request.json()
        location_id = body.get("location_id")
        date_str = body.get("date")
    except json.JSONDecodeError:
        return web.json_response({"error": "Invalid JSON"}, status=400)

    if not location_id or not date_str:
        return web.json_response({"error": "location_id and date are required"}, status=400)

    user_id = user_data.get("id")
    if not user_id:
        return web.json_response({"error": "Failed to identify user"}, status=400)

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É "–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É, –ª—é–±–æ–µ –≤—Ä–µ–º—è, –≤—Å–µ –∫–æ—Ä—Ç—ã"
    monitor_data = {"type": "specific", "value": date_str}
    hour = -1  # –õ—é–±–æ–µ –≤—Ä–µ–º—è
    court_types = list(LOCATIONS_CONFIG.get(location_id, {}).get("courts", {}).keys())

    if not court_types:
        return web.json_response({"error": "Invalid location"}, status=400)

    db.add_user_time(user_id, location_id, hour, court_types, monitor_data)
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ WebApp –¥–ª—è user_id={user_id} –Ω–∞ {location_id} ({date_str})")

    return web.json_response({"status": "ok", "message": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!"})


# ================== –ù–ê–°–¢–†–û–ô–ö–ê –ò –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ==================

def setup_webapp_routes(app):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app.router.add_get("/api/locations", get_locations)
    app.router.add_get("/api/calendar", get_calendar_data)
    app.router.add_get("/api/sessions", get_sessions_for_date)
    app.router.add_post("/api/notify", add_notification)


async def create_webapp_server(host='0.0.0.0', port=8080, bot_app=None):
    """–°–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä."""
    webapp = web.Application()

    # –î–µ–ª–∞–µ–º —Å–µ—Å—Å–∏—é aiohttp –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    webapp['aiohttp_session'] = bot_app.bot_data['aiohttp_session']

    setup_webapp_routes(webapp)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    import aiohttp_cors
    cors = aiohttp_cors.setup(webapp, defaults={
        "*": aiohttp_cors.ResourceOptions(
            allow_credentials=True,
            expose_headers="*",
            allow_headers="*",
        )
    })
    for route in list(webapp.router.routes()):
        cors.add(route)

    runner = web.AppRunner(webapp)
    await runner.setup()
    site = web.TCPSite(runner, host, port)
    logger.info(f"üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Mini App –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{host}:{port}")
    await site.start()
    return site
